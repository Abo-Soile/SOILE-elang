delimiters "$", "$"


abspaths ::= [
  "bin":"soile2.bin",
  "defs":"soile2.defs",
  "fns":"soile2.defs.fns",
  "gen":"soile2.defs.gen",
  "gvars":"soile2.defs.gvars",
  "rt":"soile2.rt",
  "vals":"soile2.defs.vals",
  "vars":"soile2.defs.vars"
]

defs ::= [
  "defs":"__defs",
  "env":"__env",
  "fns":"__fns",
  "fvars":"__env",
  "gen":"__gen",
  "gvars":"__gvars",
  "instr":"instructions",
  "vals":"__vals",
  "vars":"__vars"
]


abspathBin() ::= "$abspaths.bin$" 

abspathRt() ::= "$abspaths.rt$" 

abspathGvars() ::= "$abspaths.gvars$" 

abspathVals() ::= "$abspaths.vals$" 

abspathFns() ::= "$abspaths.fns$" 

abspathVars() ::= "$abspaths.vars$"

abspathRtFunc(name) ::= "$abspathRt()$.$name$"

gencode(toplevel, pis, startIndex) ::= <%

(function(){
  var soile2 = SOILE2;
  var $defs.gvars$,$defs.vals$, $defs.fns$, $defs.vars$;
  $abspaths.bin$.emptymsg();
  $abspaths.rt$.dyn.clear();
  $abspaths.rt$.reset_defs();
  $defs.gvars$=$abspaths.gvars$;
  $defs.vals$=$abspaths.vals$;
  $defs.fns$=$abspaths.fns$;
  $defs.vars$=$abspaths.vars$;
  $toplevel: {tp | $tp.def$}; separator="\n"$
  $abspaths.rt$.reset_piarray();
  $abspaths.rt$.set_piarray((function(){
    var instructions = [];
    $pis: {pi | $pi.def$}; separator="\n"$
    return function(idx){
      return instructions[idx];
    };
  })());
  $abspaths.rt$.pi_index.set($startIndex$);
  $abspaths.rt$.finalize_defs();
})();

%>

fdefWithFvars(name, params, fvarDefs, varDefs, stmts) ::= <%

$defs.fns$["$name$"]=(function(){
  $fvarDefs: {fvardef | var $fvardef.name$ = $fvardef.value$;}; separator="\n"$
  
  return function($params$){
    $varDefs: {vardef | var $vardef.name$ = $vardef.value$;}; separator="\n"$
    $stmts: {s | $s.stmt$}$
  };
})();

%>

fdefWithoutFvars(name, params, varDefs, stmts) ::= <%

$defs.fns$["$name$"]=function($params$){
  $varDefs: {vardef | var $vardef.name$ = $vardef.value$;}; separator="\n"$
  $stmts: {s | $s.stmt$}$
};

%>

functiondef(name, params, stmts) ::= <<
$! TODO Can be removed. !$

$defs.fns$["$name$"] = function($params$){
  var $defs.env$=this;
  var $defs.fns$=$abspaths.fns$;
  var $defs.gen$=$abspaths.gen$;
  $stmts: {s | $s.stmt$}$
};

>>

genfunctiondef(name, params, stmts) ::= <<
$! TODO Can be removed. !$

$defs.gen$["$name$"] = function($params$){
  var $defs.env$=this;
  var $defs.fns$=$abspaths.fns$;
  var $defs.gen$=$abspaths.gen$;
  $stmts: {s | $s.stmt$}$
};

>>

imagefile(id, url) ::= "soile2.bin.imagefile('$id$', '$url$')"

funccall(name, params) ::= "$name$($params$)"

defgvar(name, value) ::= "$defs.gvars$['$name$']=$value$;"

defval(name, value) ::= "$defs.vals$['$name$']=$value$;"

defvar(name, value) ::= "$defs.vars$['$name$']=$value$;"

deffvar(name, value) ::= "$defs.fvars$['$name$']=$value$;"

envfunccall(name, env, params) ::= "$name$.apply($env$,$params$)"

absref2gvar(name) ::= "$abspaths.gvars$['$name$']"

absref2val(name) ::= "$abspaths.val$['$name$']"

ref2bin(name) ::= "$abspaths.bin$.$name$"

ref2gvar(name) ::= "$defs.gvars$['$name$']"

ref2val(name) ::= "$defs.vals$['$name$']"

ref2fn(name) ::= "$defs.fns$['$name$']"

ref2fvar(name) ::= "$name$"

ref2varShort(name) ::= "$name$"

ref2varLong(name) ::= "$defs.vars$['$name$']"

ref2param(name) ::= "$name$"

stmtAssign(name, value) ::= "$name$=$value$;"

stmtFunccall(name, params) ::= "$name$($params$);"

stmtIf(expr, ifBlock) ::= <%
if($expr$){$ifBlock$}
%>

stmtIfElse(expr, ifBlock, elseBlock) ::= <%
if($expr$){$ifBlock$}else{$elseBlock$}
%>

stmtWhile(expr, block) ::= <%
while($expr$){$block$}
%>

stmtContinue() ::= "continue;"

stmtReturn(expr) ::= "return $expr$;"

stmtBreak() ::= "break;"

exprIndexing(name, key) ::= "$name$[$key$]"

exprPropRef(name, key) ::= "$name$.$key$"

exprFuncCall(name, params) ::= "$name$($params$)"

opcfcallparams(params) ::= <%

function(){
  return [ $params$ ];
}

%>

opcassignvalue(value) ::= <%

function(){
  return $value$;
}

%>

piMsExpr(expr) ::= <%
function(){
  return $abspaths.rt$.milliseconds($expr$);
}
%>

piAssign(opcode, host, name, value) ::= <%
  $defs.instr$.push({
    "opcode": $opcode$,
    "host": $host$,
    "name": "$name$",
    "value": $opcassignvalue(value)$
  });
%>

piFcall(opcode, host, name, params) ::= <%
  $defs.instr$.push({
    "opcode": $opcode$,
    "host": $host$,
    "name": "$name$",
    "params": $opcfcallparams(params)$
  });
%>

piIf(opcode, cond, jmp) ::= <%
  $defs.instr$.push({
    "opcode": $opcode$,
    "jmp": $jmp$,
    "cond": $piCondExpr(cond)$
  });
%>

piWhile(opcode, cond, jmp) ::= <%
  $defs.instr$.push({
    "opcode": $opcode$,
    "jmp": $jmp$,
    "cond": $piCondExpr(cond)$
  });
%>

piGoto(opcode, jmp) ::= <%
  $defs.instr$.push({
    "opcode": $opcode$,
    "jmp": $jmp$
  });
%>

piWait(opcode, ms) ::= <%
  $defs.instr$.push({
    "opcode": $opcode$,
    "ms": $piMsExpr(ms)$
  });
%>

piSuspend(opcode) ::= <%
  $defs.instr$.push({
    "opcode": $opcode$
  });
%>

piDef(opcode, varDefs) ::= <%
  $defs.instr$.push({
    "opcode": $opcode$,
    "func": $piVardefFunc(varDefs)$
  });
%>

piUndef(opcode) ::= <%
  $defs.instr$.push({
    "opcode": $opcode$
  });
%>

piEoc(opcode) ::= <%
  $defs.instr$.push({
    "opcode": $opcode$
  });
%>

piVardefFunc(varDefs) ::= <%
function(){
  var $defs.vars$ = $abspaths.vars$;
  $varDefs: {def | $defvar(def.name, def.value)$}; separator="\n"$
}
%>

piCondExpr(expr) ::= <%
function(){
  return $abspaths.rt$.truthvalue($expr$);
}
%>

transitionRuleCond(cond) ::= "$cond$"

transitionRuleCond2(cond) ::= <%
  function(){ return $abspaths.rt$.truthvalue($cond$); }
%>

alwaysTrueCondExpr() ::= <%
  function(){ return true; }
%>


